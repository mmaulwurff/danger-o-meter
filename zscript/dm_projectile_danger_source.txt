class DM_ProjectileDangerSource : DM_DangerSource
{

  override double, double CalculateCurrentDangerValue( Actor  player
                                                     , Actor  projectile
                                                     , double distance
                                                     )
  {
    if (!projectile.bMISSILE) { return 0, 0; }

    vector3 vel = projectile.vel;
    if (vel.x == 0 && vel.y == 0 && vel.z == 0) { return 0, 0; }

    vector3 playerPos = player.pos;
    playerPos.z += player.Height / 2;

    vector3 oldPos   = projectile.pos - vel;
    vector3 oldDelta = playerPos - oldPos;
    double  oldDist  = oldDelta.length();

    if (distance > oldDist) { return 0, 0; } // moves from player

    // http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html
    vector3 x10          = projectile.pos - playerPos;
    vector3 prod         = DM_Math.crossProduct(vel, x10);
    double  lineDistance = prod.length() / vel.length();
    double  hitDistance  = player.radius + projectile.radius;
    if (hitDistance < lineDistance) { return 0, 0; }

    if (distance     < 1.0) { distance     = 1.0; }
    if (lineDistance < 1.0) { lineDistance = 1.0; }
    double dangerValue = projectile.damage / distance / lineDistance;

    dangerValue *= _internalMultiplier * _userMultiplier * projectile.speed;

    return dangerValue, 0.0;
  }

} // class DM_DangerSource
